import{_ as o,c as a,a0 as d,o as c}from"./chunks/framework.BEZymiH2.js";const m=JSON.parse('{"title":"选项卡","description":"","frontmatter":{},"headers":[],"relativePath":"diving-deeper/tabmanager.md","filePath":"diving-deeper/tabmanager.md"}'),i={name:"diving-deeper/tabmanager.md"};function t(l,e,r,n,p,s){return c(),a("div",null,e[0]||(e[0]=[d('<h1 id="选项卡" tabindex="-1">选项卡 <a class="header-anchor" href="#选项卡" aria-label="Permalink to &quot;选项卡&quot;">​</a></h1><p>选项卡区域位于编辑区和视图区的中间，它的右侧边缘是可拖拽的，用来改变两侧区域的大小。</p><p>选项卡可以作为一组实现特定功能的拼图，允许嵌套。选项卡在代码层面其实就是一个函数。</p><h2 id="基本操作" tabindex="-1">基本操作 <a class="header-anchor" href="#基本操作" aria-label="Permalink to &quot;基本操作&quot;">​</a></h2><p>除了默认选项卡<code>main</code>是不可修改的，用户可以通过菜单栏-<code>下拉菜单</code>-<code>选项卡</code>下的命令对选项卡执行新建、删除、重命名操作。</p><p>还可以通过选项卡下方的<code>+</code> <code>-</code>按钮，执行新建和删除操作。</p><h2 id="执行选项卡" tabindex="-1">执行选项卡 <a class="header-anchor" href="#执行选项卡" aria-label="Permalink to &quot;执行选项卡&quot;">​</a></h2><p>选项卡中，除了默认的<code>main</code>选项卡是自动执行的，用户自行创建的选项卡需要使用<code>系统</code>分类下的<code>执行选项卡</code>拼图运行。<code>执行选项卡</code>拼图决定了要在什么位置执行这个选项卡中的拼图；如果没有这个拼图，对应的选项卡就不会执行。这样做的好处是，用户可以完全控制选项卡的执行时机。</p><p>此外，<code>执行选项卡</code>拼图还可以从当前工作区传递参数，及返回选项卡的执行结果（它就是个函数）。</p><h2 id="跳转选项卡" tabindex="-1">跳转选项卡 <a class="header-anchor" href="#跳转选项卡" aria-label="Permalink to &quot;跳转选项卡&quot;">​</a></h2><p>要从<code>执行选项卡</code>拼图跳转到对应的拼图工作区，你可以：</p><ol><li>在<code>执行选项卡</code>拼图上使用快捷键<code>Tab</code>可以跳转到该拼图指定的选项卡；使用快捷键<code>Shift</code> + <code>Tab</code>可以从任意选项卡返回<code>main</code>选项卡</li><li>除了使用快捷键，通过<code>执行选项卡</code>拼图的右键菜单-<code>跳转选项卡</code>也可以实现跳转</li></ol><h2 id="选项卡内部变量" tabindex="-1">选项卡内部变量 <a class="header-anchor" href="#选项卡内部变量" aria-label="Permalink to &quot;选项卡内部变量&quot;">​</a></h2><p>选项卡内部的变量是独立的。假如<code>main</code>选项卡中有一个变量<code>a</code>，<code>custom</code>选项卡中也有一个变量<code>a</code>，这两个变量各自独立，互不影响。</p><p>这有两个好处：</p><ol><li>项目复杂，变量增加时，不用担心变量过多、重名等问题</li><li>可以安全实现跨项目复制拼图，只需将拼图复制到新建选项卡中，然后执行这个选项卡</li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在复制拼图时，如果有拼图函数，要先复制拼图函数，再复制其它拼图</p></div><h2 id="跨选项卡通信" tabindex="-1">跨选项卡通信 <a class="header-anchor" href="#跨选项卡通信" aria-label="Permalink to &quot;跨选项卡通信&quot;">​</a></h2><p>如果要在一个选项卡中访问其它选项卡的数据，怎么实现呢？</p><p>实现的方法有：</p><ol><li>在执行选项卡向选项卡内传递参数，再使用系统分类下的<code>选项卡参数</code>拼图获取传进来的数据。比如，我们在主选项卡中加载了一个json文件，可以把加载的数据作为参数传递给选项卡，然后在这个选项卡中用这个json创建用户界面</li><li>在<code>main</code>选项卡中利用系统分类的<code>全局对象</code>拼图添加可以从任意选项卡访问的全局数据；使用对象分类下的<code>对象成员</code>拼图可以设置或获取数据</li><li>使用系统分类的<code>返回</code>拼图返回选项卡内部数据，并在执行选项卡时切换为“获取执行”</li></ol>',21)]))}const b=o(i,[["render",t]]);export{m as __pageData,b as default};
