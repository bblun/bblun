import{_ as o,c as s,a0 as t,G as i,B as r,o as c}from"./chunks/framework.BEZymiH2.js";const l="/doc/start/mesh-action.jpg",b=JSON.parse('{"title":"动画和事件","description":"","frontmatter":{},"headers":[],"relativePath":"start/6-event.md","filePath":"start/6-event.md"}'),p={name:"start/6-event.md"};function n(d,e,m,h,u,f){const a=r("AppName");return c(),s("div",null,[e[0]||(e[0]=t('<h1 id="动画和事件" tabindex="-1">动画和事件 <a class="header-anchor" href="#动画和事件" aria-label="Permalink to &quot;动画和事件&quot;">​</a></h1><h2 id="动画" tabindex="-1">动画 <a class="header-anchor" href="#动画" aria-label="Permalink to &quot;动画&quot;">​</a></h2><p>我们想要实现的效果是点击箱子播放开箱动画，再次点击播放关箱动画。这里我们把模型全部合并，给它做绑定，通过骨骼动画实现开关箱。这样做的好处是，如果模型、材质很复杂，在渲染时会增加相当大的计算量，所以习惯上会把模型合并，尽量优化材质，减少材质球数量。这是从优化性能角度上考虑的。这里模型很简单，直接在模型上做动画也是可以的。</p><p>由于默认动画是自动播放的，我们使用动画分类下的<code>停止全部动画</code>来阻止这一默认行为。</p><p>动画分类下有更多操作动画的拼图，但是，这里我们利用事件来控制动画播放。</p><h2 id="事件" tabindex="-1">事件 <a class="header-anchor" href="#事件" aria-label="Permalink to &quot;事件&quot;">​</a></h2>',6)),i(a),e[1]||(e[1]=t('提供了非常多的事件处理方法，这是为了应付复杂的需求，要讲起来会比较复杂。其中有一组拼图非常简单，但是十分强大，出场率极高，那就是网格动作拼图。这是一组快速实现网格交互的拼图，要用它控制动画也很方便。<p>在<code>添加网格动作</code>拼图的动作插槽中，用户可以给网格添加各种类型的动作，这些动作会根据触发事件按顺序执行。比如，点击一次，执行第一个动作，再次点击执行第二个动作，依次类推。当有多个动作时，只有第一个动作的触发事件有效，所以其它动作的事件类型可以选择“无”。全部动作执行完毕后，如果继续触发事件，就会从新执行第一个动作，开始下一个循环。这就是网格动作的原理。</p><p><img src="'+l+'" alt="mesh-action"></p><p>现在看上面的拼图就容易了。</p><ul><li>因为要点击的是箱子，所以网格动作要添加给名为<code>case</code>的箱子模型</li><li>动作的类型是“播放动画”</li><li>触发事件是鼠标单击</li><li>目标是要播放骨骼上的动画，骨骼<code>boneTip</code>可以用节点分类下的<code>节点选择器</code>获取</li><li>最后设置动画的开始、结束帧</li></ul><div class="tip custom-block"><p class="custom-block-title">注</p><p>动画的默认帧率是60fps，在三维软件中制作动画前需要设置为相同的帧率；如果没修改帧率就导出了，可以在场景查看器的动画组中查看导出后的开始结束帧。</p></div><p>第二个动作相同，只是动画相反。你还可以实现多次点击，箱子逐步打开这样的效果。游戏中经常出现玩家不断挥剑，造成道具不断损坏，直到破碎，使用网格动作可以轻松实现。</p>',7))])}const v=o(p,[["render",n]]);export{b as __pageData,v as default};
